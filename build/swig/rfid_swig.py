# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rfid_swig
else:
    import _rfid_swig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def high_res_timer_now() -> "gr::high_res_timer_type":
    r"""high_res_timer_now() -> gr::high_res_timer_type"""
    return _rfid_swig.high_res_timer_now()

def high_res_timer_now_perfmon() -> "gr::high_res_timer_type":
    r"""high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _rfid_swig.high_res_timer_now_perfmon()

def high_res_timer_tps() -> "gr::high_res_timer_type":
    r"""high_res_timer_tps() -> gr::high_res_timer_type"""
    return _rfid_swig.high_res_timer_tps()

def high_res_timer_epoch() -> "gr::high_res_timer_type":
    r"""high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _rfid_swig.high_res_timer_epoch()
class gate(object):
    r"""
    The block is responsible for identifying a reader's command.

    The samples related to a reader's command are blocked and consumed. Samples that belong to a Tag's message (RN16-EPC) are forwarded to the next block for further processing.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of rfid::gate.

    To avoid accidental use of raw pointers, rfid::gate's constructor is in a private implementation class. rfid::gate::make is the public interface for creating new instances.

    Args:
        sample_rate : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(sample_rate: "int") -> "gr::rfid::gate::sptr":
        r"""
        make(int sample_rate) -> gate_sptr
        The block is responsible for identifying a reader's command.

        The samples related to a reader's command are blocked and consumed. Samples that belong to a Tag's message (RN16-EPC) are forwarded to the next block for further processing.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of rfid::gate.

        To avoid accidental use of raw pointers, rfid::gate's constructor is in a private implementation class. rfid::gate::make is the public interface for creating new instances.

        Args:
            sample_rate : 
        """
        return _rfid_swig.gate_make(sample_rate)
    __swig_destroy__ = _rfid_swig.delete_gate

# Register gate in _rfid_swig:
_rfid_swig.gate_swigregister(gate)

def gate_make(sample_rate: "int") -> "gr::rfid::gate::sptr":
    r"""
    gate_make(int sample_rate) -> gate_sptr
    The block is responsible for identifying a reader's command.

    The samples related to a reader's command are blocked and consumed. Samples that belong to a Tag's message (RN16-EPC) are forwarded to the next block for further processing.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of rfid::gate.

    To avoid accidental use of raw pointers, rfid::gate's constructor is in a private implementation class. rfid::gate::make is the public interface for creating new instances.

    Args:
        sample_rate : 
    """
    return _rfid_swig.gate_make(sample_rate)

class gate_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::rfid::gate > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(gate_sptr self) -> gate_sptr
        __init__(gate_sptr self, gate p) -> gate_sptr
        """
        _rfid_swig.gate_sptr_swiginit(self, _rfid_swig.new_gate_sptr(*args))

    def __deref__(self) -> "gr::rfid::gate *":
        r"""__deref__(gate_sptr self) -> gate"""
        return _rfid_swig.gate_sptr___deref__(self)
    __swig_destroy__ = _rfid_swig.delete_gate_sptr

    def make(self, sample_rate: "int") -> "gr::rfid::gate::sptr":
        r"""
        make(gate_sptr self, int sample_rate) -> gate_sptr
        The block is responsible for identifying a reader's command.

        The samples related to a reader's command are blocked and consumed. Samples that belong to a Tag's message (RN16-EPC) are forwarded to the next block for further processing.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of rfid::gate.

        To avoid accidental use of raw pointers, rfid::gate's constructor is in a private implementation class. rfid::gate::make is the public interface for creating new instances.

        Args:
            sample_rate : 
        """
        return _rfid_swig.gate_sptr_make(self, sample_rate)

    def history(self) -> "unsigned int":
        r"""history(gate_sptr self) -> unsigned int"""
        return _rfid_swig.gate_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(gate_sptr self, int which, int delay)
        declare_sample_delay(gate_sptr self, unsigned int delay)
        """
        return _rfid_swig.gate_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(gate_sptr self, int which) -> unsigned int"""
        return _rfid_swig.gate_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(gate_sptr self, int multiple)"""
        return _rfid_swig.gate_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(gate_sptr self) -> int"""
        return _rfid_swig.gate_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(gate_sptr self) -> double"""
        return _rfid_swig.gate_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(gate_sptr self) -> uint64_t"""
        return _rfid_swig.gate_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(gate_sptr self) -> uint64_t"""
        return _rfid_swig.gate_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(gate_sptr self) -> bool"""
        return _rfid_swig.gate_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(gate_sptr self) -> bool"""
        return _rfid_swig.gate_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(gate_sptr self, unsigned int which_input) -> uint64_t"""
        return _rfid_swig.gate_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(gate_sptr self, unsigned int which_output) -> uint64_t"""
        return _rfid_swig.gate_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(gate_sptr self, std::string level)"""
        return _rfid_swig.gate_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(gate_sptr self) -> std::string"""
        return _rfid_swig.gate_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(gate_sptr self) -> int"""
        return _rfid_swig.gate_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(gate_sptr self, int m)"""
        return _rfid_swig.gate_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(gate_sptr self)"""
        return _rfid_swig.gate_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(gate_sptr self) -> bool"""
        return _rfid_swig.gate_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(gate_sptr self, int m)"""
        return _rfid_swig.gate_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(gate_sptr self) -> int"""
        return _rfid_swig.gate_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(gate_sptr self, int i) -> long"""
        return _rfid_swig.gate_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(gate_sptr self, long max_output_buffer)
        set_max_output_buffer(gate_sptr self, int port, long max_output_buffer)
        """
        return _rfid_swig.gate_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(gate_sptr self, int i) -> long"""
        return _rfid_swig.gate_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(gate_sptr self, long min_output_buffer)
        set_min_output_buffer(gate_sptr self, int port, long min_output_buffer)
        """
        return _rfid_swig.gate_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(gate_sptr self) -> float"""
        return _rfid_swig.gate_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(gate_sptr self) -> float"""
        return _rfid_swig.gate_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(gate_sptr self) -> float"""
        return _rfid_swig.gate_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(gate_sptr self) -> float"""
        return _rfid_swig.gate_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(gate_sptr self) -> float"""
        return _rfid_swig.gate_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(gate_sptr self) -> float"""
        return _rfid_swig.gate_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(gate_sptr self, int which) -> float
        pc_input_buffers_full(gate_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.gate_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(gate_sptr self, int which) -> float
        pc_input_buffers_full_avg(gate_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.gate_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(gate_sptr self, int which) -> float
        pc_input_buffers_full_var(gate_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.gate_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(gate_sptr self, int which) -> float
        pc_output_buffers_full(gate_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.gate_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(gate_sptr self, int which) -> float
        pc_output_buffers_full_avg(gate_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.gate_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(gate_sptr self, int which) -> float
        pc_output_buffers_full_var(gate_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.gate_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(gate_sptr self) -> float"""
        return _rfid_swig.gate_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(gate_sptr self) -> float"""
        return _rfid_swig.gate_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(gate_sptr self) -> float"""
        return _rfid_swig.gate_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(gate_sptr self) -> float"""
        return _rfid_swig.gate_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(gate_sptr self) -> float"""
        return _rfid_swig.gate_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(gate_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _rfid_swig.gate_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(gate_sptr self)"""
        return _rfid_swig.gate_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(gate_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _rfid_swig.gate_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(gate_sptr self) -> int"""
        return _rfid_swig.gate_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(gate_sptr self) -> int"""
        return _rfid_swig.gate_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(gate_sptr self, int priority) -> int"""
        return _rfid_swig.gate_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(gate_sptr self) -> std::string"""
        return _rfid_swig.gate_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(gate_sptr self) -> std::string"""
        return _rfid_swig.gate_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(gate_sptr self) -> io_signature_sptr"""
        return _rfid_swig.gate_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(gate_sptr self) -> io_signature_sptr"""
        return _rfid_swig.gate_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(gate_sptr self) -> long"""
        return _rfid_swig.gate_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(gate_sptr self) -> basic_block_sptr"""
        return _rfid_swig.gate_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(gate_sptr self, int ninputs, int noutputs) -> bool"""
        return _rfid_swig.gate_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(gate_sptr self) -> std::string"""
        return _rfid_swig.gate_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(gate_sptr self, std::string name)"""
        return _rfid_swig.gate_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(gate_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _rfid_swig.gate_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(gate_sptr self) -> swig_pmt_ptr"""
        return _rfid_swig.gate_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(gate_sptr self) -> swig_pmt_ptr"""
        return _rfid_swig.gate_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(gate_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _rfid_swig.gate_sptr_message_subscribers(self, which_port)

# Register gate_sptr in _rfid_swig:
_rfid_swig.gate_sptr_swigregister(gate_sptr)


gate_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
gate = gate.make;

class reader(object):
    r"""Proxy of C++ gr::rfid::reader class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def print_results(self) -> "void":
        r"""print_results(reader self)"""
        return _rfid_swig.reader_print_results(self)

    @staticmethod
    def make(sample_rate: "int", dac_rate: "int") -> "gr::rfid::reader::sptr":
        r"""make(int sample_rate, int dac_rate) -> reader_sptr"""
        return _rfid_swig.reader_make(sample_rate, dac_rate)
    __swig_destroy__ = _rfid_swig.delete_reader

# Register reader in _rfid_swig:
_rfid_swig.reader_swigregister(reader)

def reader_make(sample_rate: "int", dac_rate: "int") -> "gr::rfid::reader::sptr":
    r"""reader_make(int sample_rate, int dac_rate) -> reader_sptr"""
    return _rfid_swig.reader_make(sample_rate, dac_rate)

class reader_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::rfid::reader > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(reader_sptr self) -> reader_sptr
        __init__(reader_sptr self, reader p) -> reader_sptr
        """
        _rfid_swig.reader_sptr_swiginit(self, _rfid_swig.new_reader_sptr(*args))

    def __deref__(self) -> "gr::rfid::reader *":
        r"""__deref__(reader_sptr self) -> reader"""
        return _rfid_swig.reader_sptr___deref__(self)
    __swig_destroy__ = _rfid_swig.delete_reader_sptr

    def print_results(self) -> "void":
        r"""print_results(reader_sptr self)"""
        return _rfid_swig.reader_sptr_print_results(self)

    def make(self, sample_rate: "int", dac_rate: "int") -> "gr::rfid::reader::sptr":
        r"""make(reader_sptr self, int sample_rate, int dac_rate) -> reader_sptr"""
        return _rfid_swig.reader_sptr_make(self, sample_rate, dac_rate)

    def history(self) -> "unsigned int":
        r"""history(reader_sptr self) -> unsigned int"""
        return _rfid_swig.reader_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(reader_sptr self, int which, int delay)
        declare_sample_delay(reader_sptr self, unsigned int delay)
        """
        return _rfid_swig.reader_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(reader_sptr self, int which) -> unsigned int"""
        return _rfid_swig.reader_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(reader_sptr self, int multiple)"""
        return _rfid_swig.reader_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(reader_sptr self) -> int"""
        return _rfid_swig.reader_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(reader_sptr self) -> double"""
        return _rfid_swig.reader_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(reader_sptr self) -> uint64_t"""
        return _rfid_swig.reader_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(reader_sptr self) -> uint64_t"""
        return _rfid_swig.reader_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(reader_sptr self) -> bool"""
        return _rfid_swig.reader_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(reader_sptr self) -> bool"""
        return _rfid_swig.reader_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(reader_sptr self, unsigned int which_input) -> uint64_t"""
        return _rfid_swig.reader_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(reader_sptr self, unsigned int which_output) -> uint64_t"""
        return _rfid_swig.reader_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(reader_sptr self, std::string level)"""
        return _rfid_swig.reader_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(reader_sptr self) -> std::string"""
        return _rfid_swig.reader_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(reader_sptr self) -> int"""
        return _rfid_swig.reader_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(reader_sptr self, int m)"""
        return _rfid_swig.reader_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(reader_sptr self)"""
        return _rfid_swig.reader_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(reader_sptr self) -> bool"""
        return _rfid_swig.reader_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(reader_sptr self, int m)"""
        return _rfid_swig.reader_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(reader_sptr self) -> int"""
        return _rfid_swig.reader_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(reader_sptr self, int i) -> long"""
        return _rfid_swig.reader_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(reader_sptr self, long max_output_buffer)
        set_max_output_buffer(reader_sptr self, int port, long max_output_buffer)
        """
        return _rfid_swig.reader_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(reader_sptr self, int i) -> long"""
        return _rfid_swig.reader_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(reader_sptr self, long min_output_buffer)
        set_min_output_buffer(reader_sptr self, int port, long min_output_buffer)
        """
        return _rfid_swig.reader_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(reader_sptr self) -> float"""
        return _rfid_swig.reader_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(reader_sptr self) -> float"""
        return _rfid_swig.reader_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(reader_sptr self) -> float"""
        return _rfid_swig.reader_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(reader_sptr self) -> float"""
        return _rfid_swig.reader_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(reader_sptr self) -> float"""
        return _rfid_swig.reader_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(reader_sptr self) -> float"""
        return _rfid_swig.reader_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(reader_sptr self, int which) -> float
        pc_input_buffers_full(reader_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.reader_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(reader_sptr self, int which) -> float
        pc_input_buffers_full_avg(reader_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.reader_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(reader_sptr self, int which) -> float
        pc_input_buffers_full_var(reader_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.reader_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(reader_sptr self, int which) -> float
        pc_output_buffers_full(reader_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.reader_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(reader_sptr self, int which) -> float
        pc_output_buffers_full_avg(reader_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.reader_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(reader_sptr self, int which) -> float
        pc_output_buffers_full_var(reader_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.reader_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(reader_sptr self) -> float"""
        return _rfid_swig.reader_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(reader_sptr self) -> float"""
        return _rfid_swig.reader_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(reader_sptr self) -> float"""
        return _rfid_swig.reader_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(reader_sptr self) -> float"""
        return _rfid_swig.reader_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(reader_sptr self) -> float"""
        return _rfid_swig.reader_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(reader_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _rfid_swig.reader_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(reader_sptr self)"""
        return _rfid_swig.reader_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(reader_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _rfid_swig.reader_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(reader_sptr self) -> int"""
        return _rfid_swig.reader_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(reader_sptr self) -> int"""
        return _rfid_swig.reader_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(reader_sptr self, int priority) -> int"""
        return _rfid_swig.reader_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(reader_sptr self) -> std::string"""
        return _rfid_swig.reader_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(reader_sptr self) -> std::string"""
        return _rfid_swig.reader_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(reader_sptr self) -> io_signature_sptr"""
        return _rfid_swig.reader_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(reader_sptr self) -> io_signature_sptr"""
        return _rfid_swig.reader_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(reader_sptr self) -> long"""
        return _rfid_swig.reader_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(reader_sptr self) -> basic_block_sptr"""
        return _rfid_swig.reader_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(reader_sptr self, int ninputs, int noutputs) -> bool"""
        return _rfid_swig.reader_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(reader_sptr self) -> std::string"""
        return _rfid_swig.reader_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(reader_sptr self, std::string name)"""
        return _rfid_swig.reader_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(reader_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _rfid_swig.reader_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(reader_sptr self) -> swig_pmt_ptr"""
        return _rfid_swig.reader_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(reader_sptr self) -> swig_pmt_ptr"""
        return _rfid_swig.reader_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(reader_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _rfid_swig.reader_sptr_message_subscribers(self, which_port)

# Register reader_sptr in _rfid_swig:
_rfid_swig.reader_sptr_swigregister(reader_sptr)


reader_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
reader = reader.make;

class tag_decoder(object):
    r"""Proxy of C++ gr::rfid::tag_decoder class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(sample_rate: "int") -> "gr::rfid::tag_decoder::sptr":
        r"""make(int sample_rate) -> tag_decoder_sptr"""
        return _rfid_swig.tag_decoder_make(sample_rate)
    __swig_destroy__ = _rfid_swig.delete_tag_decoder

# Register tag_decoder in _rfid_swig:
_rfid_swig.tag_decoder_swigregister(tag_decoder)

def tag_decoder_make(sample_rate: "int") -> "gr::rfid::tag_decoder::sptr":
    r"""tag_decoder_make(int sample_rate) -> tag_decoder_sptr"""
    return _rfid_swig.tag_decoder_make(sample_rate)

class tag_decoder_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::rfid::tag_decoder > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(tag_decoder_sptr self) -> tag_decoder_sptr
        __init__(tag_decoder_sptr self, tag_decoder p) -> tag_decoder_sptr
        """
        _rfid_swig.tag_decoder_sptr_swiginit(self, _rfid_swig.new_tag_decoder_sptr(*args))

    def __deref__(self) -> "gr::rfid::tag_decoder *":
        r"""__deref__(tag_decoder_sptr self) -> tag_decoder"""
        return _rfid_swig.tag_decoder_sptr___deref__(self)
    __swig_destroy__ = _rfid_swig.delete_tag_decoder_sptr

    def make(self, sample_rate: "int") -> "gr::rfid::tag_decoder::sptr":
        r"""make(tag_decoder_sptr self, int sample_rate) -> tag_decoder_sptr"""
        return _rfid_swig.tag_decoder_sptr_make(self, sample_rate)

    def history(self) -> "unsigned int":
        r"""history(tag_decoder_sptr self) -> unsigned int"""
        return _rfid_swig.tag_decoder_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(tag_decoder_sptr self, int which, int delay)
        declare_sample_delay(tag_decoder_sptr self, unsigned int delay)
        """
        return _rfid_swig.tag_decoder_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(tag_decoder_sptr self, int which) -> unsigned int"""
        return _rfid_swig.tag_decoder_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(tag_decoder_sptr self, int multiple)"""
        return _rfid_swig.tag_decoder_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(tag_decoder_sptr self) -> int"""
        return _rfid_swig.tag_decoder_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(tag_decoder_sptr self) -> double"""
        return _rfid_swig.tag_decoder_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(tag_decoder_sptr self) -> uint64_t"""
        return _rfid_swig.tag_decoder_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(tag_decoder_sptr self) -> uint64_t"""
        return _rfid_swig.tag_decoder_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(tag_decoder_sptr self) -> bool"""
        return _rfid_swig.tag_decoder_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(tag_decoder_sptr self) -> bool"""
        return _rfid_swig.tag_decoder_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(tag_decoder_sptr self, unsigned int which_input) -> uint64_t"""
        return _rfid_swig.tag_decoder_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(tag_decoder_sptr self, unsigned int which_output) -> uint64_t"""
        return _rfid_swig.tag_decoder_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(tag_decoder_sptr self, std::string level)"""
        return _rfid_swig.tag_decoder_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(tag_decoder_sptr self) -> std::string"""
        return _rfid_swig.tag_decoder_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(tag_decoder_sptr self) -> int"""
        return _rfid_swig.tag_decoder_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(tag_decoder_sptr self, int m)"""
        return _rfid_swig.tag_decoder_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(tag_decoder_sptr self)"""
        return _rfid_swig.tag_decoder_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(tag_decoder_sptr self) -> bool"""
        return _rfid_swig.tag_decoder_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(tag_decoder_sptr self, int m)"""
        return _rfid_swig.tag_decoder_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(tag_decoder_sptr self) -> int"""
        return _rfid_swig.tag_decoder_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(tag_decoder_sptr self, int i) -> long"""
        return _rfid_swig.tag_decoder_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(tag_decoder_sptr self, long max_output_buffer)
        set_max_output_buffer(tag_decoder_sptr self, int port, long max_output_buffer)
        """
        return _rfid_swig.tag_decoder_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(tag_decoder_sptr self, int i) -> long"""
        return _rfid_swig.tag_decoder_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(tag_decoder_sptr self, long min_output_buffer)
        set_min_output_buffer(tag_decoder_sptr self, int port, long min_output_buffer)
        """
        return _rfid_swig.tag_decoder_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(tag_decoder_sptr self) -> float"""
        return _rfid_swig.tag_decoder_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(tag_decoder_sptr self) -> float"""
        return _rfid_swig.tag_decoder_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(tag_decoder_sptr self) -> float"""
        return _rfid_swig.tag_decoder_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(tag_decoder_sptr self) -> float"""
        return _rfid_swig.tag_decoder_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(tag_decoder_sptr self) -> float"""
        return _rfid_swig.tag_decoder_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(tag_decoder_sptr self) -> float"""
        return _rfid_swig.tag_decoder_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(tag_decoder_sptr self, int which) -> float
        pc_input_buffers_full(tag_decoder_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.tag_decoder_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(tag_decoder_sptr self, int which) -> float
        pc_input_buffers_full_avg(tag_decoder_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.tag_decoder_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(tag_decoder_sptr self, int which) -> float
        pc_input_buffers_full_var(tag_decoder_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.tag_decoder_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(tag_decoder_sptr self, int which) -> float
        pc_output_buffers_full(tag_decoder_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.tag_decoder_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(tag_decoder_sptr self, int which) -> float
        pc_output_buffers_full_avg(tag_decoder_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.tag_decoder_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(tag_decoder_sptr self, int which) -> float
        pc_output_buffers_full_var(tag_decoder_sptr self) -> pmt_vector_float
        """
        return _rfid_swig.tag_decoder_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(tag_decoder_sptr self) -> float"""
        return _rfid_swig.tag_decoder_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(tag_decoder_sptr self) -> float"""
        return _rfid_swig.tag_decoder_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(tag_decoder_sptr self) -> float"""
        return _rfid_swig.tag_decoder_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(tag_decoder_sptr self) -> float"""
        return _rfid_swig.tag_decoder_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(tag_decoder_sptr self) -> float"""
        return _rfid_swig.tag_decoder_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(tag_decoder_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _rfid_swig.tag_decoder_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(tag_decoder_sptr self)"""
        return _rfid_swig.tag_decoder_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(tag_decoder_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _rfid_swig.tag_decoder_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(tag_decoder_sptr self) -> int"""
        return _rfid_swig.tag_decoder_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(tag_decoder_sptr self) -> int"""
        return _rfid_swig.tag_decoder_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(tag_decoder_sptr self, int priority) -> int"""
        return _rfid_swig.tag_decoder_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(tag_decoder_sptr self) -> std::string"""
        return _rfid_swig.tag_decoder_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(tag_decoder_sptr self) -> std::string"""
        return _rfid_swig.tag_decoder_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(tag_decoder_sptr self) -> io_signature_sptr"""
        return _rfid_swig.tag_decoder_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(tag_decoder_sptr self) -> io_signature_sptr"""
        return _rfid_swig.tag_decoder_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(tag_decoder_sptr self) -> long"""
        return _rfid_swig.tag_decoder_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(tag_decoder_sptr self) -> basic_block_sptr"""
        return _rfid_swig.tag_decoder_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(tag_decoder_sptr self, int ninputs, int noutputs) -> bool"""
        return _rfid_swig.tag_decoder_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(tag_decoder_sptr self) -> std::string"""
        return _rfid_swig.tag_decoder_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(tag_decoder_sptr self, std::string name)"""
        return _rfid_swig.tag_decoder_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(tag_decoder_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _rfid_swig.tag_decoder_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(tag_decoder_sptr self) -> swig_pmt_ptr"""
        return _rfid_swig.tag_decoder_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(tag_decoder_sptr self) -> swig_pmt_ptr"""
        return _rfid_swig.tag_decoder_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(tag_decoder_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _rfid_swig.tag_decoder_sptr_message_subscribers(self, which_port)

# Register tag_decoder_sptr in _rfid_swig:
_rfid_swig.tag_decoder_sptr_swigregister(tag_decoder_sptr)


tag_decoder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
tag_decoder = tag_decoder.make;



